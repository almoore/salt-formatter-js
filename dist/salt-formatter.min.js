/*!
 * salt-formatter-js
 * 
 * Version: 0.6.1 - 2017-06-23T20:45:23.797Z
 * License: Apache-2.0
 */
"use strict";angular.module("saltFormatter",["RecursionHelper"]).provider("SaltFormatterConfig",function(){var n=!1,e=100,t=5,s=!1;return{get hoverPreviewEnabled(){return n},set hoverPreviewEnabled(e){n=!!e},get hoverPreviewArrayCount(){return e},set hoverPreviewArrayCount(n){e=parseInt(n,10)},get hoverPreviewFieldCount(){return t},set hoverPreviewFieldCount(n){t=parseInt(n,10)},get stringWrap(){return s},set stringWrap(n){s=!!n},$get:function(){return{hoverPreviewEnabled:n,hoverPreviewArrayCount:e,hoverPreviewFieldCount:t,stringWrap:s}}}}).directive("successFailHighlight",function(){return function(n,e,t){function s(){if(e&&"json"in t){var s=n.json;angular.isObject(s)&&"result"in s&&(s.result?e.addClass("success"):s.result===!1&&e.addClass("fail"))}}s()}}).directive("saltFormatter",["RecursionHelper","SaltFormatterConfig",function(n,e){function t(n){return n.replace('"','"')}function s(n){if(void 0===n)return"";if(null===n)return"Object";if("object"==typeof n&&!n.constructor)return"Object";if(void 0!==n.__proto__&&void 0!==n.__proto__.constructor&&void 0!==n.__proto__.constructor.name)return n.__proto__.constructor.name;var e=/function (.{1,})\(/,t=e.exec(n.constructor.toString());return t&&t.length>1?t[1]:""}function r(n){return null===n?"null":typeof n}function a(n,e){var s=r(n);return"null"===s||"undefined"===s?s:("string"===s&&(e='"'+t(e)+'"'),"function"===s?n.toString().replace(/[\r\n]/g,"").replace(/\{.*\}/,"")+"{…}":e)}function i(n){var e="";return angular.isObject(n)?(e=s(n),angular.isArray(n)&&(e+="["+n.length+"]")):e=a(n,n),e}function o(n){n.isArray=function(){return angular.isArray(n.json)},n.isObject=function(){return angular.isObject(n.json)},n.getKeys=function(){if(n.isObject())return Object.keys(n.json).map(function(n){return""===n?'""':n})},n.type=r(n.json),n.hasKey="undefined"!=typeof n.key,n.getConstructorName=function(){return s(n.json)},"string"===n.type&&("Invalid Date"!==new Date(n.json).toString()&&(n.isDate=!0),0===n.json.indexOf("http")&&(n.isUrl=!0)),n.isEmptyObject=function(){return n.getKeys()&&!n.getKeys().length&&n.isOpen&&!n.isArray()},n.stringWrap=!!e.stringWrap&&"string"==n.type,n.isOpen=!!n.open,n.toggleOpen=function(){n.isOpen=!n.isOpen},n.childrenOpen=function(){return n.open>1?n.open-1:0},n.openLink=function(e){e&&(window.location.href=n.json)},n.parseValue=function(e){return a(n.json,e)},n.showThumbnail=function(){return!!e.hoverPreviewEnabled&&n.isObject()&&!n.isOpen},n.getThumbnail=function(){if(n.isArray())return n.json.length>e.hoverPreviewArrayCount?"Array["+n.json.length+"]":"["+n.json.map(i).join(", ")+"]";var t=n.getKeys(),s=t.slice(0,e.hoverPreviewFieldCount),r=s.map(function(e){return e+":"+i(n.json[e])}),a=t.length>=5?"…":"";return"{"+r.join(", ")+a+"}"}}return{templateUrl:"salt-formatter.html",restrict:"E",replace:!0,scope:{json:"=",key:"=",open:"="},compile:function(e){return n.compile(e,o)}}}]),"object"==typeof module&&(module.exports="saltFormatter"),angular.module("RecursionHelper",[]).factory("RecursionHelper",["$compile",function(n){return{compile:function(e,t){angular.isFunction(t)&&(t={post:t});var s,r=e.contents().remove();return{pre:t&&t.pre?t.pre:null,post:function(e,a){s||(s=n(r)),s(e,function(n){a.append(n)}),t&&t.post&&t.post.apply(null,arguments)}}}}}]),angular.module("saltFormatter").run(["$templateCache",function(n){n.put("salt-formatter.html",'<div success-fail-highlight="" ng-init="isOpen = open && open > 0" class="salt-formatter-row"><a ng-click="toggleOpen()"><span class="toggler {{isOpen ? \'open\' : \'\'}}" ng-if="isObject()"></span> <span class="key" ng-if="hasKey"><span class="key-text">{{key}}</span><span class="colon">:</span></span> <span class="value"><span ng-if="isObject()"><span class="constructor-name">{{getConstructorName(json)}}</span> <span ng-if="isArray()"><span class="bracket">[</span><span class="number">{{json.length}}</span><span class="bracket">]</span></span></span> <span ng-if="!isObject()" ng-click="openLink(isUrl)" class="{{type}}" ng-class="{date: isDate, url: isUrl}">{{parseValue(json)}}</span></span> <span ng-if="showThumbnail()" class="thumbnail-text">{{getThumbnail()}}</span></a><div class="children" ng-if="getKeys().length && isOpen"><salt-formatter ng-repeat="key in getKeys() track by $index" json="json[key]" key="key" open="childrenOpen()"></salt-formatter></div><div class="children empty object" ng-if="isEmptyObject()"></div><div class="children empty array" ng-if="getKeys() && !getKeys().length && isOpen && isArray()"></div></div>')}]),angular.module("RecursionHelper",[]).factory("RecursionHelper",["$compile",function(n){return{compile:function(e,t){angular.isFunction(t)&&(t={post:t});var s,r=e.contents().remove();return{pre:t&&t.pre?t.pre:null,post:function(e,a){s||(s=n(r)),s(e,function(n){a.append(n)}),t&&t.post&&t.post.apply(null,arguments)}}}}}]),angular.module("saltFormatter").run(["$templateCache",function(n){n.put("salt-formatter.html",'<div success-fail-highlight="" ng-init="isOpen = open && open > 0" class="salt-formatter-row"><a ng-click="toggleOpen()"><span class="toggler {{isOpen ? \'open\' : \'\'}}" ng-if="isObject()"></span> <span class="key" ng-if="hasKey"><span class="key-text">{{key}}</span><span class="colon">:</span></span> <span class="value"><span ng-if="isObject()"><span class="constructor-name">{{getConstructorName(json)}}</span> <span ng-if="isArray()"><span class="bracket">[</span><span class="number">{{json.length}}</span><span class="bracket">]</span></span></span> <span ng-if="!isObject()" ng-click="openLink(isUrl)" class="{{type}}" ng-class="{date: isDate, url: isUrl, wrap: stringWrap}">{{parseValue(json)}}</span></span> <span ng-if="showThumbnail()" class="thumbnail-text">{{getThumbnail()}}</span></a><div class="children" ng-if="getKeys().length && isOpen"><salt-formatter ng-repeat="key in getKeys() track by $index" json="json[key]" key="key" open="childrenOpen()"></salt-formatter></div><div class="children empty object" ng-if="isEmptyObject()"></div><div class="children empty array" ng-if="getKeys() && !getKeys().length && isOpen && isArray()"></div></div>')}]);